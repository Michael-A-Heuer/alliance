/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CalendarStorageInterface extends utils.Interface {
  functions: {
    "availableDays(uint256)": FunctionFragment;
    "dateToMeetings(uint256,uint256,uint256,uint256)": FunctionFragment;
    "emailAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "availableDays" | "dateToMeetings" | "emailAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availableDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dateToMeetings",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emailAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "availableDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dateToMeetings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emailAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CalendarStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CalendarStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    availableDays(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        attendee: string;
        hour: number;
        minute: number;
        duration: number;
      }
    >;

    emailAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  availableDays(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dateToMeetings(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number] & {
      attendee: string;
      hour: number;
      minute: number;
      duration: number;
    }
  >;

  emailAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    availableDays(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        attendee: string;
        hour: number;
        minute: number;
        duration: number;
      }
    >;

    emailAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    availableDays(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emailAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    availableDays(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emailAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
